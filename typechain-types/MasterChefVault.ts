/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MasterChefVaultInterface extends utils.Interface {
  contractName: "MasterChefVault";
  functions: {
    "CAKE()": FunctionFragment;
    "CAKE_MASTER_CHEF()": FunctionFragment;
    "MARKET()": FunctionFragment;
    "deposit(address,address,uint256)": FunctionFragment;
    "getPendingRewards()": FunctionFragment;
    "getUserPendingRewards(address)": FunctionFragment;
    "setMarket(address)": FunctionFragment;
    "totalAmount()": FunctionFragment;
    "totalRewardsPerAmount()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CAKE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CAKE_MASTER_CHEF",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MARKET", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPendingRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setMarket", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardsPerAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CAKE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CAKE_MASTER_CHEF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MARKET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsPerAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Compound(uint256,uint256,uint256)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Compound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type CompoundEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { rewards: BigNumber; fee: BigNumber; blockNumber: BigNumber }
>;

export type CompoundEventFilter = TypedEventFilter<CompoundEvent>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface MasterChefVault extends BaseContract {
  contractName: "MasterChefVault";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MasterChefVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CAKE(overrides?: CallOverrides): Promise<[string]>;

    CAKE_MASTER_CHEF(overrides?: CallOverrides): Promise<[string]>;

    MARKET(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPendingRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserPendingRewards(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    setMarket(
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewardsPerAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewards: BigNumber;
      }
    >;

    withdraw(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CAKE(overrides?: CallOverrides): Promise<string>;

  CAKE_MASTER_CHEF(overrides?: CallOverrides): Promise<string>;

  MARKET(overrides?: CallOverrides): Promise<string>;

  deposit(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

  getUserPendingRewards(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setMarket(
    market: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewardsPerAmount(overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      rewards: BigNumber;
    }
  >;

  withdraw(
    account: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CAKE(overrides?: CallOverrides): Promise<string>;

    CAKE_MASTER_CHEF(overrides?: CallOverrides): Promise<string>;

    MARKET(overrides?: CallOverrides): Promise<string>;

    deposit(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getUserPendingRewards(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMarket(market: string, overrides?: CallOverrides): Promise<void>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardsPerAmount(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewards: BigNumber;
      }
    >;

    withdraw(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Compound(uint256,uint256,uint256)"(
      rewards?: null,
      fee?: null,
      blockNumber?: BigNumberish | null
    ): CompoundEventFilter;
    Compound(
      rewards?: null,
      fee?: null,
      blockNumber?: BigNumberish | null
    ): CompoundEventFilter;

    "Deposit(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): DepositEventFilter;

    "Withdraw(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    CAKE(overrides?: CallOverrides): Promise<BigNumber>;

    CAKE_MASTER_CHEF(overrides?: CallOverrides): Promise<BigNumber>;

    MARKET(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getUserPendingRewards(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMarket(
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardsPerAmount(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CAKE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CAKE_MASTER_CHEF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MARKET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPendingRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserPendingRewards(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMarket(
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRewardsPerAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
