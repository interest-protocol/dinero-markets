/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DineroVenusVaultInterface extends utils.Interface {
  contractName: "DineroVenusVault";
  functions: {
    "DINERO()": FunctionFragment;
    "FEE_TO()": FunctionFragment;
    "ROUTER()": FunctionFragment;
    "SAFE_VENUS()": FunctionFragment;
    "VENUS_CONTROLLER()": FunctionFragment;
    "WBNB()": FunctionFragment;
    "XVS()": FunctionFragment;
    "accountOf(address,address)": FunctionFragment;
    "addVToken(address)": FunctionFragment;
    "approveXVS()": FunctionFragment;
    "collateralLimit()": FunctionFragment;
    "compoundDepth()": FunctionFragment;
    "deleverage(address)": FunctionFragment;
    "deleverageAll()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "emergencyRecovery()": FunctionFragment;
    "getAllUnderlyings()": FunctionFragment;
    "getTotalUnderlyings()": FunctionFragment;
    "getUnderlyingAt(uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,address,address)": FunctionFragment;
    "isUnderlyingSupported(address)": FunctionFragment;
    "leverage(address)": FunctionFragment;
    "leverageAll()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeVToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repayAll(address)": FunctionFragment;
    "rewardsOf(address)": FunctionFragment;
    "setCollateralLimit(uint256)": FunctionFragment;
    "setCompoundDepth(uint8)": FunctionFragment;
    "totalFreeUnderlying(address)": FunctionFragment;
    "totalFreeVTokenOf(address)": FunctionFragment;
    "totalLossOf(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "vTokenOf(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DINERO", values?: undefined): string;
  encodeFunctionData(functionFragment: "FEE_TO", values?: undefined): string;
  encodeFunctionData(functionFragment: "ROUTER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SAFE_VENUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VENUS_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WBNB", values?: undefined): string;
  encodeFunctionData(functionFragment: "XVS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountOf",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "addVToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approveXVS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "compoundDepth",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deleverage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deleverageAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRecovery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUnderlyings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUnderlyings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isUnderlyingSupported",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "leverage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "leverageAll",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeVToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "repayAll", values: [string]): string;
  encodeFunctionData(functionFragment: "rewardsOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCollateralLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompoundDepth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFreeUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFreeVTokenOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "totalLossOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vTokenOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "DINERO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FEE_TO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ROUTER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SAFE_VENUS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VENUS_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WBNB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "XVS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accountOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addVToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveXVS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compoundDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleverage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleverageAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUnderlyings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUnderlyings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUnderlyingSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leverage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leverageAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompoundDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFreeUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFreeVTokenOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLossOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vTokenOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddVToken(address,address)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "CollateralLimit(uint256,uint256)": EventFragment;
    "CompoundDepth(uint256,uint256)": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "EmergencyRecovery(uint256)": EventFragment;
    "Loss(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RemoveVToken(address,address)": EventFragment;
    "RepayAndRedeem(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Withdraw(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddVToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompoundDepth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyRecovery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Loss"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveVToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayAndRedeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AddVTokenEvent = TypedEvent<
  [string, string],
  { vToken: string; underlying: string }
>;

export type AddVTokenEventFilter = TypedEventFilter<AddVTokenEvent>;

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type CollateralLimitEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldValue: BigNumber; newValue: BigNumber }
>;

export type CollateralLimitEventFilter = TypedEventFilter<CollateralLimitEvent>;

export type CompoundDepthEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldValue: BigNumber; newValue: BigNumber }
>;

export type CompoundDepthEventFilter = TypedEventFilter<CompoundDepthEvent>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    account: string;
    underlying: string;
    amount: BigNumber;
    vTokenAmount: BigNumber;
  }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type EmergencyRecoveryEvent = TypedEvent<
  [BigNumber],
  { vTokenAmount: BigNumber }
>;

export type EmergencyRecoveryEventFilter =
  TypedEventFilter<EmergencyRecoveryEvent>;

export type LossEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    previousTotalUnderlying: BigNumber;
    currentTotalUnderlying: BigNumber;
    lossPerVToken: BigNumber;
  }
>;

export type LossEventFilter = TypedEventFilter<LossEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RemoveVTokenEvent = TypedEvent<
  [string, string],
  { vToken: string; underlying: string }
>;

export type RemoveVTokenEventFilter = TypedEventFilter<RemoveVTokenEvent>;

export type RepayAndRedeemEvent = TypedEvent<
  [string, BigNumber],
  { arg0: string; amount: BigNumber }
>;

export type RepayAndRedeemEventFilter = TypedEventFilter<RepayAndRedeemEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    account: string;
    underlying: string;
    vTokenAmount: BigNumber;
    amount: BigNumber;
  }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface DineroVenusVault extends BaseContract {
  contractName: "DineroVenusVault";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DineroVenusVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DINERO(overrides?: CallOverrides): Promise<[string]>;

    FEE_TO(overrides?: CallOverrides): Promise<[string]>;

    ROUTER(overrides?: CallOverrides): Promise<[string]>;

    SAFE_VENUS(overrides?: CallOverrides): Promise<[string]>;

    VENUS_CONTROLLER(overrides?: CallOverrides): Promise<[string]>;

    WBNB(overrides?: CallOverrides): Promise<[string]>;

    XVS(overrides?: CallOverrides): Promise<[string]>;

    accountOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        principal: BigNumber;
        vTokens: BigNumber;
        rewardsPaid: BigNumber;
        lossVTokensAccrued: BigNumber;
      }
    >;

    addVToken(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveXVS(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    compoundDepth(overrides?: CallOverrides): Promise<[number]>;

    deleverage(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleverageAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      underlying: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllUnderlyings(overrides?: CallOverrides): Promise<[string[]]>;

    getTotalUnderlyings(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnderlyingAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      xvs: string,
      wbnb: string,
      router: string,
      venusController: string,
      dinero: string,
      safeVenus: string,
      feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isUnderlyingSupported(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    leverage(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    leverageAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeVToken(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayAll(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setCollateralLimit(
      _collateralLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCompoundDepth(
      _compoundDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalFreeUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalFreeVTokenOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalLossOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vTokenOf(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      underlying: string,
      vTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DINERO(overrides?: CallOverrides): Promise<string>;

  FEE_TO(overrides?: CallOverrides): Promise<string>;

  ROUTER(overrides?: CallOverrides): Promise<string>;

  SAFE_VENUS(overrides?: CallOverrides): Promise<string>;

  VENUS_CONTROLLER(overrides?: CallOverrides): Promise<string>;

  WBNB(overrides?: CallOverrides): Promise<string>;

  XVS(overrides?: CallOverrides): Promise<string>;

  accountOf(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      principal: BigNumber;
      vTokens: BigNumber;
      rewardsPaid: BigNumber;
      lossVTokensAccrued: BigNumber;
    }
  >;

  addVToken(
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveXVS(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralLimit(overrides?: CallOverrides): Promise<BigNumber>;

  compoundDepth(overrides?: CallOverrides): Promise<number>;

  deleverage(
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleverageAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    underlying: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyRecovery(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllUnderlyings(overrides?: CallOverrides): Promise<string[]>;

  getTotalUnderlyings(overrides?: CallOverrides): Promise<BigNumber>;

  getUnderlyingAt(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    xvs: string,
    wbnb: string,
    router: string,
    venusController: string,
    dinero: string,
    safeVenus: string,
    feeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isUnderlyingSupported(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  leverage(
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  leverageAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeVToken(
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayAll(
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setCollateralLimit(
    _collateralLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCompoundDepth(
    _compoundDepth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalFreeUnderlying(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalFreeVTokenOf(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalLossOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vTokenOf(arg0: string, overrides?: CallOverrides): Promise<string>;

  withdraw(
    underlying: string,
    vTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DINERO(overrides?: CallOverrides): Promise<string>;

    FEE_TO(overrides?: CallOverrides): Promise<string>;

    ROUTER(overrides?: CallOverrides): Promise<string>;

    SAFE_VENUS(overrides?: CallOverrides): Promise<string>;

    VENUS_CONTROLLER(overrides?: CallOverrides): Promise<string>;

    WBNB(overrides?: CallOverrides): Promise<string>;

    XVS(overrides?: CallOverrides): Promise<string>;

    accountOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        principal: BigNumber;
        vTokens: BigNumber;
        rewardsPaid: BigNumber;
        lossVTokensAccrued: BigNumber;
      }
    >;

    addVToken(vToken: string, overrides?: CallOverrides): Promise<void>;

    approveXVS(overrides?: CallOverrides): Promise<void>;

    collateralLimit(overrides?: CallOverrides): Promise<BigNumber>;

    compoundDepth(overrides?: CallOverrides): Promise<number>;

    deleverage(vToken: string, overrides?: CallOverrides): Promise<void>;

    deleverageAll(overrides?: CallOverrides): Promise<void>;

    deposit(
      underlying: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyRecovery(overrides?: CallOverrides): Promise<void>;

    getAllUnderlyings(overrides?: CallOverrides): Promise<string[]>;

    getTotalUnderlyings(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      xvs: string,
      wbnb: string,
      router: string,
      venusController: string,
      dinero: string,
      safeVenus: string,
      feeTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isUnderlyingSupported(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    leverage(vToken: string, overrides?: CallOverrides): Promise<void>;

    leverageAll(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeVToken(vToken: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayAll(vToken: string, overrides?: CallOverrides): Promise<void>;

    rewardsOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setCollateralLimit(
      _collateralLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCompoundDepth(
      _compoundDepth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalFreeUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFreeVTokenOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLossOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vTokenOf(arg0: string, overrides?: CallOverrides): Promise<string>;

    withdraw(
      underlying: string,
      vTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddVToken(address,address)"(
      vToken?: string | null,
      underlying?: string | null
    ): AddVTokenEventFilter;
    AddVToken(
      vToken?: string | null,
      underlying?: string | null
    ): AddVTokenEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "CollateralLimit(uint256,uint256)"(
      oldValue?: null,
      newValue?: BigNumberish | null
    ): CollateralLimitEventFilter;
    CollateralLimit(
      oldValue?: null,
      newValue?: BigNumberish | null
    ): CollateralLimitEventFilter;

    "CompoundDepth(uint256,uint256)"(
      oldValue?: null,
      newValue?: BigNumberish | null
    ): CompoundDepthEventFilter;
    CompoundDepth(
      oldValue?: null,
      newValue?: BigNumberish | null
    ): CompoundDepthEventFilter;

    "Deposit(address,address,uint256,uint256)"(
      account?: string | null,
      underlying?: string | null,
      amount?: null,
      vTokenAmount?: null
    ): DepositEventFilter;
    Deposit(
      account?: string | null,
      underlying?: string | null,
      amount?: null,
      vTokenAmount?: null
    ): DepositEventFilter;

    "EmergencyRecovery(uint256)"(
      vTokenAmount?: null
    ): EmergencyRecoveryEventFilter;
    EmergencyRecovery(vTokenAmount?: null): EmergencyRecoveryEventFilter;

    "Loss(uint256,uint256,uint256)"(
      previousTotalUnderlying?: null,
      currentTotalUnderlying?: null,
      lossPerVToken?: null
    ): LossEventFilter;
    Loss(
      previousTotalUnderlying?: null,
      currentTotalUnderlying?: null,
      lossPerVToken?: null
    ): LossEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RemoveVToken(address,address)"(
      vToken?: string | null,
      underlying?: string | null
    ): RemoveVTokenEventFilter;
    RemoveVToken(
      vToken?: string | null,
      underlying?: string | null
    ): RemoveVTokenEventFilter;

    "RepayAndRedeem(address,uint256)"(
      arg0?: null,
      amount?: null
    ): RepayAndRedeemEventFilter;
    RepayAndRedeem(arg0?: null, amount?: null): RepayAndRedeemEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "Withdraw(address,address,uint256,uint256)"(
      account?: string | null,
      underlying?: string | null,
      vTokenAmount?: null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: string | null,
      underlying?: string | null,
      vTokenAmount?: null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    DINERO(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_TO(overrides?: CallOverrides): Promise<BigNumber>;

    ROUTER(overrides?: CallOverrides): Promise<BigNumber>;

    SAFE_VENUS(overrides?: CallOverrides): Promise<BigNumber>;

    VENUS_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    WBNB(overrides?: CallOverrides): Promise<BigNumber>;

    XVS(overrides?: CallOverrides): Promise<BigNumber>;

    accountOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addVToken(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveXVS(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralLimit(overrides?: CallOverrides): Promise<BigNumber>;

    compoundDepth(overrides?: CallOverrides): Promise<BigNumber>;

    deleverage(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleverageAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      underlying: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllUnderlyings(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUnderlyings(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      xvs: string,
      wbnb: string,
      router: string,
      venusController: string,
      dinero: string,
      safeVenus: string,
      feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isUnderlyingSupported(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leverage(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    leverageAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeVToken(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayAll(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setCollateralLimit(
      _collateralLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCompoundDepth(
      _compoundDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalFreeUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFreeVTokenOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLossOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vTokenOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      underlying: string,
      vTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DINERO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_TO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROUTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SAFE_VENUS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VENUS_CONTROLLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WBNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    XVS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addVToken(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveXVS(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compoundDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleverage(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleverageAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      underlying: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllUnderlyings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalUnderlyings(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      xvs: string,
      wbnb: string,
      router: string,
      venusController: string,
      dinero: string,
      safeVenus: string,
      feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isUnderlyingSupported(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leverage(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    leverageAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeVToken(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayAll(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCollateralLimit(
      _collateralLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCompoundDepth(
      _compoundDepth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalFreeUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFreeVTokenOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLossOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vTokenOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      underlying: string,
      vTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
