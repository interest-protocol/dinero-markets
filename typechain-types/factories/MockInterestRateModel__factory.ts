/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockInterestRateModel,
  MockInterestRateModelInterface,
} from "../MockInterestRateModel";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalBorrow",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalReserves",
        type: "uint256",
      },
    ],
    name: "BorrowRateArgs",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalBorrow",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalReserves",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "mantissa",
        type: "uint256",
      },
    ],
    name: "SupplyRateArgs",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "__setBorrowRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "__setSupplyRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "_borrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_supplyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalBorrow",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalReserves",
        type: "uint256",
      },
    ],
    name: "getBorrowRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cash",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalBorrow",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalReserves",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "mantissa",
        type: "uint256",
      },
    ],
    name: "getSupplyRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061022c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806315f24053146100675780635d306fb61461008c57806379aa7364146100a1578063af03353e146100b4578063b8168816146100bd578063c932bd3a146100d0575b600080fd5b61007a61007536600461017f565b6100d9565b60405190815260200160405180910390f35b61009f61009a3660046101ab565b600055565b005b61009f6100af3660046101ab565b600155565b61007a60015481565b61007a6100cb3660046101c4565b610128565b61007a60005481565b60408051848152602081018490529081018290526000907f402fbd0d328809144b652ca4bd670761f8f769ffe133df83d60018088f31516a9060600160405180910390a1506001549392505050565b6040805185815260208101859052908101839052606081018290526000907fccf5040d8982218729b6965c50e20361d373ca96f4509f1dff1af23d4606afb99060800160405180910390a150600054949350505050565b60008060006060848603121561019457600080fd5b505081359360208301359350604090920135919050565b6000602082840312156101bd57600080fd5b5035919050565b600080600080608085870312156101da57600080fd5b505082359460208401359450604084013593606001359250905056fea2646970667358221220f99ddb3c15b910d167348eb49d0dd84bc49904d82c6ececbca1ac725246e364b64736f6c634300080a0033";

type MockInterestRateModelConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockInterestRateModelConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockInterestRateModel__factory extends ContractFactory {
  constructor(...args: MockInterestRateModelConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockInterestRateModel";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockInterestRateModel> {
    return super.deploy(overrides || {}) as Promise<MockInterestRateModel>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockInterestRateModel {
    return super.attach(address) as MockInterestRateModel;
  }
  connect(signer: Signer): MockInterestRateModel__factory {
    return super.connect(signer) as MockInterestRateModel__factory;
  }
  static readonly contractName: "MockInterestRateModel";
  public readonly contractName: "MockInterestRateModel";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockInterestRateModelInterface {
    return new utils.Interface(_abi) as MockInterestRateModelInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockInterestRateModel {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockInterestRateModel;
  }
}
