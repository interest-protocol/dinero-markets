/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockVenusVault,
  MockVenusVaultInterface,
} from "../MockVenusVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_collateralLimit",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "collateralLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_collateralLimit",
        type: "uint256",
      },
    ],
    name: "setCollateralLimit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161010f38038061010f83398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b60b18061005e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80633b9f81de146037578063c4899b18146051575b600080fd5b603f60005481565b60405190815260200160405180910390f35b6061605c3660046063565b600055565b005b600060208284031215607457600080fd5b503591905056fea2646970667358221220712fdb3758d7d784be4b0105ae473d52bc4e72a49f201c0cd6ac89eb28012ce364736f6c634300080a0033";

type MockVenusVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockVenusVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockVenusVault__factory extends ContractFactory {
  constructor(...args: MockVenusVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockVenusVault";
  }

  deploy(
    _collateralLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockVenusVault> {
    return super.deploy(
      _collateralLimit,
      overrides || {}
    ) as Promise<MockVenusVault>;
  }
  getDeployTransaction(
    _collateralLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_collateralLimit, overrides || {});
  }
  attach(address: string): MockVenusVault {
    return super.attach(address) as MockVenusVault;
  }
  connect(signer: Signer): MockVenusVault__factory {
    return super.connect(signer) as MockVenusVault__factory;
  }
  static readonly contractName: "MockVenusVault";
  public readonly contractName: "MockVenusVault";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVenusVaultInterface {
    return new utils.Interface(_abi) as MockVenusVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVenusVault {
    return new Contract(address, _abi, signerOrProvider) as MockVenusVault;
  }
}
