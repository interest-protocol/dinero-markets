/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PancakeERC20, PancakeERC20Interface } from "../PancakeERC20";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604080518082018252600b81526a50616e63616b65204c507360a81b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527fe87cb5a4dc26cf9451529a20899fcee996799afd48d7c0db7c25e150b364661d818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c0909101909252815191012060035561094a806100f26000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80633644e5151161008c57806395d89b411161006657806395d89b41146101eb578063a9059cbb14610211578063d505accf14610224578063dd62ed3e1461023957600080fd5b80633644e515146101a257806370a08231146101ab5780637ecebe00146101cb57600080fd5b806306fdde03146100d4578063095ea7b31461011457806318160ddd1461013757806323b872dd1461014e57806330adf81f14610161578063313ce56714610188575b600080fd5b6100fe6040518060400160405280600b81526020016a50616e63616b65204c507360a81b81525081565b60405161010b919061071c565b60405180910390f35b61012761012236600461078d565b610264565b604051901515815260200161010b565b61014060005481565b60405190815260200161010b565b61012761015c3660046107b7565b61027a565b6101407f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610190601281565b60405160ff909116815260200161010b565b61014060035481565b6101406101b93660046107f3565b60016020526000908152604090205481565b6101406101d93660046107f3565b60046020526000908152604090205481565b6100fe60405180604001604052806007815260200166043616b652d4c560cc1b81525081565b61012761021f36600461078d565b61030e565b61023761023236600461080e565b61031b565b005b610140610247366004610881565b600260209081526000928352604080842090915290825290205481565b6000610271338484610532565b50600192915050565b6001600160a01b0383166000908152600260209081526040808320338452909152812054600019146102f9576001600160a01b03841660009081526002602090815260408083203384529091529020546102d49083610594565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b6103048484846105dd565b5060019392505050565b60006102713384846105dd565b428410156103635760405162461bcd60e51b815260206004820152601060248201526f14185b98d85ad94e881156141254915160821b60448201526064015b60405180910390fd5b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876103b6836108ca565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161042f92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561049a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906104d05750886001600160a01b0316816001600160a01b0316145b61051c5760405162461bcd60e51b815260206004820152601a60248201527f50616e63616b653a20494e56414c49445f5349474e4154555245000000000000604482015260640161035a565b610527898989610532565b505050505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006105d683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610683565b9392505050565b6001600160a01b0383166000908152600160205260409020546106009082610594565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461062f90826106bd565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105879085815260200190565b600081848411156106a75760405162461bcd60e51b815260040161035a919061071c565b5060006106b484866108e5565b95945050505050565b6000806106ca83856108fc565b9050838110156105d65760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161035a565b600060208083528351808285015260005b818110156107495785810183015185820160400152820161072d565b8181111561075b576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461078857600080fd5b919050565b600080604083850312156107a057600080fd5b6107a983610771565b946020939093013593505050565b6000806000606084860312156107cc57600080fd5b6107d584610771565b92506107e360208501610771565b9150604084013590509250925092565b60006020828403121561080557600080fd5b6105d682610771565b600080600080600080600060e0888a03121561082957600080fd5b61083288610771565b965061084060208901610771565b95506040880135945060608801359350608088013560ff8116811461086457600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561089457600080fd5b61089d83610771565b91506108ab60208401610771565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156108de576108de6108b4565b5060010190565b6000828210156108f7576108f76108b4565b500390565b6000821982111561090f5761090f6108b4565b50019056fea264697066735822122087e12ba817292c32c42f1cc76e2a93a560599bcbe4174e1a62d041103bdd3a1c64736f6c634300080a0033";

type PancakeERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PancakeERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PancakeERC20__factory extends ContractFactory {
  constructor(...args: PancakeERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "PancakeERC20";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PancakeERC20> {
    return super.deploy(overrides || {}) as Promise<PancakeERC20>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PancakeERC20 {
    return super.attach(address) as PancakeERC20;
  }
  connect(signer: Signer): PancakeERC20__factory {
    return super.connect(signer) as PancakeERC20__factory;
  }
  static readonly contractName: "PancakeERC20";
  public readonly contractName: "PancakeERC20";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PancakeERC20Interface {
    return new utils.Interface(_abi) as PancakeERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PancakeERC20 {
    return new Contract(address, _abi, signerOrProvider) as PancakeERC20;
  }
}
