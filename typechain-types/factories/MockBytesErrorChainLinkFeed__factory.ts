/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockBytesErrorChainLinkFeed,
  MockBytesErrorChainLinkFeedInterface,
} from "../MockBytesErrorChainLinkFeed";

const _abi = [
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060e58061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063feaf968c14602d575b600080fd5b6033606e565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a00160405180910390f35b600080808080607a6099565b5068020000000000031fb494600094506361bd961d9350839250859150565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220e0130e1539bc0a83f72532c0f9f659464e256aec3ee1de4580325bae7015975264736f6c634300080a0033";

type MockBytesErrorChainLinkFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockBytesErrorChainLinkFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockBytesErrorChainLinkFeed__factory extends ContractFactory {
  constructor(...args: MockBytesErrorChainLinkFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockBytesErrorChainLinkFeed";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockBytesErrorChainLinkFeed> {
    return super.deploy(
      overrides || {}
    ) as Promise<MockBytesErrorChainLinkFeed>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockBytesErrorChainLinkFeed {
    return super.attach(address) as MockBytesErrorChainLinkFeed;
  }
  connect(signer: Signer): MockBytesErrorChainLinkFeed__factory {
    return super.connect(signer) as MockBytesErrorChainLinkFeed__factory;
  }
  static readonly contractName: "MockBytesErrorChainLinkFeed";
  public readonly contractName: "MockBytesErrorChainLinkFeed";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBytesErrorChainLinkFeedInterface {
    return new utils.Interface(_abi) as MockBytesErrorChainLinkFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBytesErrorChainLinkFeed {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockBytesErrorChainLinkFeed;
  }
}
