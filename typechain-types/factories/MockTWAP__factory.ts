/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockTWAP, MockTWAPInterface } from "../MockTWAP";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "consult",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "setValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "value",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101a5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633fa4f2451461004657806355241077146100615780638c86f1e414610076575b600080fd5b61004f60005481565b60405190815260200160405180910390f35b61007461006f3660046100af565b600055565b005b61004f6100843660046100e4565b6000670de0b6b3a76400008360005461009d9190610120565b6100a7919061014d565b949350505050565b6000602082840312156100c157600080fd5b5035919050565b80356001600160a01b03811681146100df57600080fd5b919050565b6000806000606084860312156100f957600080fd5b610102846100c8565b925060208401359150610117604085016100c8565b90509250925092565b600081600019048311821515161561014857634e487b7160e01b600052601160045260246000fd5b500290565b60008261016a57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122063f8312dd02845d8e995e7fab587a1e6c5552fe31447ff655ffc353531f1e19964736f6c634300080a0033";

type MockTWAPConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTWAPConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockTWAP__factory extends ContractFactory {
  constructor(...args: MockTWAPConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockTWAP";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockTWAP> {
    return super.deploy(overrides || {}) as Promise<MockTWAP>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockTWAP {
    return super.attach(address) as MockTWAP;
  }
  connect(signer: Signer): MockTWAP__factory {
    return super.connect(signer) as MockTWAP__factory;
  }
  static readonly contractName: "MockTWAP";
  public readonly contractName: "MockTWAP";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTWAPInterface {
    return new utils.Interface(_abi) as MockTWAPInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockTWAP {
    return new Contract(address, _abi, signerOrProvider) as MockTWAP;
  }
}
