/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockErrorChainLinkFeed,
  MockErrorChainLinkFeedInterface,
} from "../MockErrorChainLinkFeed";

const _abi = [
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ea8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063feaf968c14602d575b600080fd5b6033606e565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a00160405180910390f35b60008080808060405162461bcd60e51b815260040160ab906020808252600b908201526a2a22a9aa1d1022a92927a960a91b604082015260600190565b60405180910390fdfea2646970667358221220b0b72b028b0a3179c8913530f7c608b4f52eb665edcf9be1fd55b9ec5f2e970a64736f6c634300080a0033";

type MockErrorChainLinkFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockErrorChainLinkFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockErrorChainLinkFeed__factory extends ContractFactory {
  constructor(...args: MockErrorChainLinkFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockErrorChainLinkFeed";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockErrorChainLinkFeed> {
    return super.deploy(overrides || {}) as Promise<MockErrorChainLinkFeed>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockErrorChainLinkFeed {
    return super.attach(address) as MockErrorChainLinkFeed;
  }
  connect(signer: Signer): MockErrorChainLinkFeed__factory {
    return super.connect(signer) as MockErrorChainLinkFeed__factory;
  }
  static readonly contractName: "MockErrorChainLinkFeed";
  public readonly contractName: "MockErrorChainLinkFeed";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockErrorChainLinkFeedInterface {
    return new utils.Interface(_abi) as MockErrorChainLinkFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockErrorChainLinkFeed {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockErrorChainLinkFeed;
  }
}
