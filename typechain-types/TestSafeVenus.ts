/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TestSafeVenusInterface extends utils.Interface {
  contractName: "TestSafeVenus";
  functions: {
    "SAFE_VENUS()": FunctionFragment;
    "borrowAndSupply(address,address)": FunctionFragment;
    "borrowInterestPerBlock(address,address,uint256)": FunctionFragment;
    "deleverage(address,address)": FunctionFragment;
    "isProfitable(address,address,uint256)": FunctionFragment;
    "predictBorrowRate(address,uint256)": FunctionFragment;
    "predictSupplyRate(address,uint256)": FunctionFragment;
    "safeBorrow(address,address)": FunctionFragment;
    "safeCollateralRatio(address,address)": FunctionFragment;
    "safeRedeem(address,address)": FunctionFragment;
    "supplyRewardPerBlock(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SAFE_VENUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAndSupply",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowInterestPerBlock",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleverage",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isProfitable",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "predictBorrowRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "predictSupplyRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBorrow",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeCollateralRatio",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeRedeem",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyRewardPerBlock",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "SAFE_VENUS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowAndSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowInterestPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleverage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isProfitable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictSupplyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeBorrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyRewardPerBlock",
    data: BytesLike
  ): Result;

  events: {
    "BorrowAndSupply(uint256,uint256)": EventFragment;
    "BorrowInterestPerBlock(uint256,uint256)": EventFragment;
    "Deleverage(uint256)": EventFragment;
    "IsProfitable(bool)": EventFragment;
    "PredictBorrowRate(uint256)": EventFragment;
    "PredictSupplyRate(uint256)": EventFragment;
    "SafeBorrow(uint256)": EventFragment;
    "SafeRedeem(uint256)": EventFragment;
    "SupplyRewardPerBlock(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BorrowAndSupply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowInterestPerBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deleverage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IsProfitable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredictBorrowRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredictSupplyRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafeBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafeRedeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupplyRewardPerBlock"): EventFragment;
}

export type BorrowAndSupplyEvent = TypedEvent<
  [BigNumber, BigNumber],
  { borrow: BigNumber; supply: BigNumber }
>;

export type BorrowAndSupplyEventFilter = TypedEventFilter<BorrowAndSupplyEvent>;

export type BorrowInterestPerBlockEvent = TypedEvent<
  [BigNumber, BigNumber],
  { cost: BigNumber; profit: BigNumber }
>;

export type BorrowInterestPerBlockEventFilter =
  TypedEventFilter<BorrowInterestPerBlockEvent>;

export type DeleverageEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type DeleverageEventFilter = TypedEventFilter<DeleverageEvent>;

export type IsProfitableEvent = TypedEvent<[boolean], { result: boolean }>;

export type IsProfitableEventFilter = TypedEventFilter<IsProfitableEvent>;

export type PredictBorrowRateEvent = TypedEvent<
  [BigNumber],
  { rate: BigNumber }
>;

export type PredictBorrowRateEventFilter =
  TypedEventFilter<PredictBorrowRateEvent>;

export type PredictSupplyRateEvent = TypedEvent<
  [BigNumber],
  { rate: BigNumber }
>;

export type PredictSupplyRateEventFilter =
  TypedEventFilter<PredictSupplyRateEvent>;

export type SafeBorrowEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type SafeBorrowEventFilter = TypedEventFilter<SafeBorrowEvent>;

export type SafeRedeemEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type SafeRedeemEventFilter = TypedEventFilter<SafeRedeemEvent>;

export type SupplyRewardPerBlockEvent = TypedEvent<
  [BigNumber],
  { profit: BigNumber }
>;

export type SupplyRewardPerBlockEventFilter =
  TypedEventFilter<SupplyRewardPerBlockEvent>;

export interface TestSafeVenus extends BaseContract {
  contractName: "TestSafeVenus";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestSafeVenusInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SAFE_VENUS(overrides?: CallOverrides): Promise<[string]>;

    borrowAndSupply(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowInterestPerBlock(
      vault: string,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleverage(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isProfitable(
      vault: string,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    predictBorrowRate(
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    predictSupplyRate(
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBorrow(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeCollateralRatio(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    safeRedeem(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supplyRewardPerBlock(
      vault: string,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SAFE_VENUS(overrides?: CallOverrides): Promise<string>;

  borrowAndSupply(
    vault: string,
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowInterestPerBlock(
    vault: string,
    vToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleverage(
    vault: string,
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isProfitable(
    vault: string,
    vToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  predictBorrowRate(
    vToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  predictSupplyRate(
    vToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBorrow(
    vault: string,
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeCollateralRatio(
    vault: string,
    vToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeRedeem(
    vault: string,
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supplyRewardPerBlock(
    vault: string,
    vToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SAFE_VENUS(overrides?: CallOverrides): Promise<string>;

    borrowAndSupply(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowInterestPerBlock(
      vault: string,
      vToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deleverage(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isProfitable(
      vault: string,
      vToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    predictBorrowRate(
      vToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    predictSupplyRate(
      vToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBorrow(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeCollateralRatio(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeRedeem(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyRewardPerBlock(
      vault: string,
      vToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BorrowAndSupply(uint256,uint256)"(
      borrow?: null,
      supply?: null
    ): BorrowAndSupplyEventFilter;
    BorrowAndSupply(borrow?: null, supply?: null): BorrowAndSupplyEventFilter;

    "BorrowInterestPerBlock(uint256,uint256)"(
      cost?: null,
      profit?: null
    ): BorrowInterestPerBlockEventFilter;
    BorrowInterestPerBlock(
      cost?: null,
      profit?: null
    ): BorrowInterestPerBlockEventFilter;

    "Deleverage(uint256)"(amount?: null): DeleverageEventFilter;
    Deleverage(amount?: null): DeleverageEventFilter;

    "IsProfitable(bool)"(result?: null): IsProfitableEventFilter;
    IsProfitable(result?: null): IsProfitableEventFilter;

    "PredictBorrowRate(uint256)"(rate?: null): PredictBorrowRateEventFilter;
    PredictBorrowRate(rate?: null): PredictBorrowRateEventFilter;

    "PredictSupplyRate(uint256)"(rate?: null): PredictSupplyRateEventFilter;
    PredictSupplyRate(rate?: null): PredictSupplyRateEventFilter;

    "SafeBorrow(uint256)"(amount?: null): SafeBorrowEventFilter;
    SafeBorrow(amount?: null): SafeBorrowEventFilter;

    "SafeRedeem(uint256)"(amount?: null): SafeRedeemEventFilter;
    SafeRedeem(amount?: null): SafeRedeemEventFilter;

    "SupplyRewardPerBlock(uint256)"(
      profit?: null
    ): SupplyRewardPerBlockEventFilter;
    SupplyRewardPerBlock(profit?: null): SupplyRewardPerBlockEventFilter;
  };

  estimateGas: {
    SAFE_VENUS(overrides?: CallOverrides): Promise<BigNumber>;

    borrowAndSupply(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowInterestPerBlock(
      vault: string,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleverage(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isProfitable(
      vault: string,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    predictBorrowRate(
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    predictSupplyRate(
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBorrow(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeCollateralRatio(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeRedeem(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supplyRewardPerBlock(
      vault: string,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SAFE_VENUS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowAndSupply(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowInterestPerBlock(
      vault: string,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleverage(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isProfitable(
      vault: string,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    predictBorrowRate(
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    predictSupplyRate(
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBorrow(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeCollateralRatio(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeRedeem(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supplyRewardPerBlock(
      vault: string,
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
