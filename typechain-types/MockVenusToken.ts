/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockVenusTokenInterface extends utils.Interface {
  contractName: "MockVenusToken";
  functions: {
    "__addSupply(uint256)": FunctionFragment;
    "__increaseBorrow(address,uint256)": FunctionFragment;
    "__setAccountSnapShot(uint256,uint256,uint256,uint256)": FunctionFragment;
    "__setAccrueInterest(uint256)": FunctionFragment;
    "__setBalanceOfUnderlying(address,uint256)": FunctionFragment;
    "__setBorrowBalanceCurrent(address,uint256)": FunctionFragment;
    "__setBorrowBalanceStored(address,uint256)": FunctionFragment;
    "__setBorrowRatePerBlock(uint256)": FunctionFragment;
    "__setBorrowReturn(uint128)": FunctionFragment;
    "__setCash(uint256)": FunctionFragment;
    "__setCollateralFactor(uint256)": FunctionFragment;
    "__setExchangeRateCurrent(uint256)": FunctionFragment;
    "__setExchangeRateStored(uint256)": FunctionFragment;
    "__setInterestRateModel(address)": FunctionFragment;
    "__setMintReturn(uint128)": FunctionFragment;
    "__setRedeemReturn(uint128)": FunctionFragment;
    "__setRedeemUnderlyingReturn(uint128)": FunctionFragment;
    "__setRepayReturnValue(uint128)": FunctionFragment;
    "__setReserveFactorMantissa(uint256)": FunctionFragment;
    "__setSeize(uint256)": FunctionFragment;
    "__setSupplyRatePerBlock(uint256)": FunctionFragment;
    "__setTotalBorrowsCurrent(uint256)": FunctionFragment;
    "__setTotalReserves(uint256)": FunctionFragment;
    "__setUnderlying(address)": FunctionFragment;
    "_collateralFactor()": FunctionFragment;
    "accrueInterest()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfUnderlying(address)": FunctionFragment;
    "borrow(uint256)": FunctionFragment;
    "borrowBalanceCurrent(address)": FunctionFragment;
    "borrowBalanceStored(address)": FunctionFragment;
    "borrowRatePerBlock()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "exchangeRateCurrent()": FunctionFragment;
    "exchangeRateStored()": FunctionFragment;
    "getAccountSnapshot(address)": FunctionFragment;
    "getCash()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "interestRateModel()": FunctionFragment;
    "liquidateBorrow(address,uint256,address)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "redeemUnderlying(uint256)": FunctionFragment;
    "repayBorrow(uint256)": FunctionFragment;
    "repayBorrowBehalf(address,uint256)": FunctionFragment;
    "reserveFactorMantissa()": FunctionFragment;
    "returnValues()": FunctionFragment;
    "seize(address,address,uint256)": FunctionFragment;
    "supplyRatePerBlock()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalBorrowsCurrent()": FunctionFragment;
    "totalReserves()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "underlying()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__addSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__increaseBorrow",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setAccountSnapShot",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setAccrueInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setBalanceOfUnderlying",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setBorrowBalanceCurrent",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setBorrowBalanceStored",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setBorrowRatePerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setBorrowReturn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setCash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setCollateralFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setExchangeRateCurrent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setExchangeRateStored",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setInterestRateModel",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "__setMintReturn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setRedeemReturn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setRedeemUnderlyingReturn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setRepayReturnValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setReserveFactorMantissa",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setSeize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setSupplyRatePerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setTotalBorrowsCurrent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setTotalReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_collateralFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceCurrent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceStored",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRatePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountSnapshot",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getCash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateModel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrow",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowBehalf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnValues",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyRatePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBorrowsCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "__addSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__increaseBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setAccountSnapShot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setAccrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setBalanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setBorrowBalanceCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setBorrowBalanceStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setBorrowRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setBorrowReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__setCash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__setCollateralFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setExchangeRateCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setExchangeRateStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setInterestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setMintReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setRedeemReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setRedeemUnderlyingReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setRepayReturnValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setReserveFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__setSeize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__setSupplyRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setTotalBorrowsCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setTotalReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collateralFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRateModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowsCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Borrow(uint256)": EventFragment;
    "Redeem(uint256)": EventFragment;
    "RedeemUnderlying(uint256)": EventFragment;
    "RepayBorrow(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemUnderlying"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type BorrowEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export type RedeemEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export type RedeemUnderlyingEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type RedeemUnderlyingEventFilter =
  TypedEventFilter<RedeemUnderlyingEvent>;

export type RepayBorrowEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type RepayBorrowEventFilter = TypedEventFilter<RepayBorrowEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface MockVenusToken extends BaseContract {
  contractName: "MockVenusToken";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockVenusTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __addSupply(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __increaseBorrow(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setAccountSnapShot(
      err: BigNumberish,
      vTokenBalance: BigNumberish,
      borrowBalance: BigNumberish,
      exchangeRateMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setAccrueInterest(
      _accrueInterest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setBalanceOfUnderlying(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setBorrowBalanceCurrent(
      account: string,
      _borrowBalanceCurrent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setBorrowBalanceStored(
      account: string,
      _borrowBalanceStored: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setBorrowRatePerBlock(
      _borrowRatePerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setBorrowReturn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setCash(
      cash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setCollateralFactor(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setExchangeRateCurrent(
      _exchangeRateCurrent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setExchangeRateStored(
      _exchangeRateStored: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setInterestRateModel(
      _interestRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setMintReturn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setRedeemReturn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setRedeemUnderlyingReturn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setRepayReturnValue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setReserveFactorMantissa(
      _reserveFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setSeize(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setSupplyRatePerBlock(
      _supplyRatePerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setTotalBorrowsCurrent(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setTotalReserves(
      _totalReserves: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setUnderlying(
      _underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _collateralFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    accrueInterest(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowBalanceCurrent(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowBalanceStored(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeRateCurrent(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeRateStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccountSnapshot(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getCash(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestRateModel(overrides?: CallOverrides): Promise<[string]>;

    liquidateBorrow(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayBorrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayBorrowBehalf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    returnValues(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        borrow: BigNumber;
        redeemUnderlying: BigNumber;
        redeem: BigNumber;
        repay: BigNumber;
        mint: BigNumber;
      }
    >;

    seize(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalBorrowsCurrent(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalReserves(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;
  };

  __addSupply(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __increaseBorrow(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setAccountSnapShot(
    err: BigNumberish,
    vTokenBalance: BigNumberish,
    borrowBalance: BigNumberish,
    exchangeRateMantissa: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setAccrueInterest(
    _accrueInterest: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setBalanceOfUnderlying(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setBorrowBalanceCurrent(
    account: string,
    _borrowBalanceCurrent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setBorrowBalanceStored(
    account: string,
    _borrowBalanceStored: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setBorrowRatePerBlock(
    _borrowRatePerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setBorrowReturn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setCash(
    cash: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setCollateralFactor(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setExchangeRateCurrent(
    _exchangeRateCurrent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setExchangeRateStored(
    _exchangeRateStored: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setInterestRateModel(
    _interestRateModel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setMintReturn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setRedeemReturn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setRedeemUnderlyingReturn(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setRepayReturnValue(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setReserveFactorMantissa(
    _reserveFactorMantissa: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setSeize(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setSupplyRatePerBlock(
    _supplyRatePerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setTotalBorrowsCurrent(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setTotalReserves(
    _totalReserves: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setUnderlying(
    _underlying: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _collateralFactor(overrides?: CallOverrides): Promise<BigNumber>;

  accrueInterest(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfUnderlying(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrow(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowBalanceCurrent(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowBalanceStored(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeRateCurrent(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountSnapshot(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getCash(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestRateModel(overrides?: CallOverrides): Promise<string>;

  liquidateBorrow(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  redeem(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayBorrow(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayBorrowBehalf(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  returnValues(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      borrow: BigNumber;
      redeemUnderlying: BigNumber;
      redeem: BigNumber;
      repay: BigNumber;
      mint: BigNumber;
    }
  >;

  seize(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalBorrowsCurrent(overrides?: CallOverrides): Promise<BigNumber>;

  totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    __addSupply(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    __increaseBorrow(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setAccountSnapShot(
      err: BigNumberish,
      vTokenBalance: BigNumberish,
      borrowBalance: BigNumberish,
      exchangeRateMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setAccrueInterest(
      _accrueInterest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setBalanceOfUnderlying(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setBorrowBalanceCurrent(
      account: string,
      _borrowBalanceCurrent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setBorrowBalanceStored(
      account: string,
      _borrowBalanceStored: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setBorrowRatePerBlock(
      _borrowRatePerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setBorrowReturn(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setCash(cash: BigNumberish, overrides?: CallOverrides): Promise<void>;

    __setCollateralFactor(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setExchangeRateCurrent(
      _exchangeRateCurrent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setExchangeRateStored(
      _exchangeRateStored: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setInterestRateModel(
      _interestRateModel: string,
      overrides?: CallOverrides
    ): Promise<void>;

    __setMintReturn(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setRedeemReturn(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setRedeemUnderlyingReturn(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setRepayReturnValue(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setReserveFactorMantissa(
      _reserveFactorMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setSeize(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    __setSupplyRatePerBlock(
      _supplyRatePerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setTotalBorrowsCurrent(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setTotalReserves(
      _totalReserves: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setUnderlying(
      _underlying: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _collateralFactor(overrides?: CallOverrides): Promise<BigNumber>;

    accrueInterest(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    borrowBalanceCurrent(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowBalanceStored(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exchangeRateCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountSnapshot(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getCash(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    interestRateModel(overrides?: CallOverrides): Promise<string>;

    liquidateBorrow(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    redeem(amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    redeemUnderlying(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayBorrow(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayBorrowBehalf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    returnValues(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        borrow: BigNumber;
        redeemUnderlying: BigNumber;
        redeem: BigNumber;
        repay: BigNumber;
        mint: BigNumber;
      }
    >;

    seize(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalBorrowsCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    underlying(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Borrow(uint256)"(amount?: null): BorrowEventFilter;
    Borrow(amount?: null): BorrowEventFilter;

    "Redeem(uint256)"(amount?: null): RedeemEventFilter;
    Redeem(amount?: null): RedeemEventFilter;

    "RedeemUnderlying(uint256)"(amount?: null): RedeemUnderlyingEventFilter;
    RedeemUnderlying(amount?: null): RedeemUnderlyingEventFilter;

    "RepayBorrow(uint256)"(amount?: null): RepayBorrowEventFilter;
    RepayBorrow(amount?: null): RepayBorrowEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    __addSupply(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __increaseBorrow(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setAccountSnapShot(
      err: BigNumberish,
      vTokenBalance: BigNumberish,
      borrowBalance: BigNumberish,
      exchangeRateMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setAccrueInterest(
      _accrueInterest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setBalanceOfUnderlying(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setBorrowBalanceCurrent(
      account: string,
      _borrowBalanceCurrent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setBorrowBalanceStored(
      account: string,
      _borrowBalanceStored: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setBorrowRatePerBlock(
      _borrowRatePerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setBorrowReturn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setCash(
      cash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setCollateralFactor(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setExchangeRateCurrent(
      _exchangeRateCurrent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setExchangeRateStored(
      _exchangeRateStored: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setInterestRateModel(
      _interestRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setMintReturn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setRedeemReturn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setRedeemUnderlyingReturn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setRepayReturnValue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setReserveFactorMantissa(
      _reserveFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setSeize(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setSupplyRatePerBlock(
      _supplyRatePerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setTotalBorrowsCurrent(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setTotalReserves(
      _totalReserves: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setUnderlying(
      _underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _collateralFactor(overrides?: CallOverrides): Promise<BigNumber>;

    accrueInterest(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowBalanceCurrent(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowBalanceStored(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeRateCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateStored(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountSnapshot(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCash(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestRateModel(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrow(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemUnderlying(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayBorrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayBorrowBehalf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    returnValues(overrides?: CallOverrides): Promise<BigNumber>;

    seize(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supplyRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowsCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserves(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __addSupply(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __increaseBorrow(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setAccountSnapShot(
      err: BigNumberish,
      vTokenBalance: BigNumberish,
      borrowBalance: BigNumberish,
      exchangeRateMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setAccrueInterest(
      _accrueInterest: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setBalanceOfUnderlying(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setBorrowBalanceCurrent(
      account: string,
      _borrowBalanceCurrent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setBorrowBalanceStored(
      account: string,
      _borrowBalanceStored: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setBorrowRatePerBlock(
      _borrowRatePerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setBorrowReturn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setCash(
      cash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setCollateralFactor(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setExchangeRateCurrent(
      _exchangeRateCurrent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setExchangeRateStored(
      _exchangeRateStored: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setInterestRateModel(
      _interestRateModel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setMintReturn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setRedeemReturn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setRedeemUnderlyingReturn(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setRepayReturnValue(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setReserveFactorMantissa(
      _reserveFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setSeize(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setSupplyRatePerBlock(
      _supplyRatePerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setTotalBorrowsCurrent(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setTotalReserves(
      _totalReserves: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setUnderlying(
      _underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _collateralFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrueInterest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfUnderlying(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowBalanceCurrent(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowBalanceStored(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowRatePerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeRateCurrent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangeRateStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountSnapshot(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestRateModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateBorrow(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayBorrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayBorrowBehalf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveFactorMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnValues(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seize(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supplyRatePerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrowsCurrent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
