/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockSafeVenusInterface extends utils.Interface {
  contractName: "MockSafeVenus";
  functions: {
    "DEFAULT()": FunctionFragment;
    "__predictSupplyRate(uint256)": FunctionFragment;
    "__setBorrowInterestPerBlock(uint256,uint256)": FunctionFragment;
    "__setIsProfitable(bool)": FunctionFragment;
    "__setPredictBorrowRate(uint256)": FunctionFragment;
    "__setSafeRedeem(uint256)": FunctionFragment;
    "__setSupplyRewardPerBlock(uint256)": FunctionFragment;
    "__setVTokenCollateralFactor(address,uint256)": FunctionFragment;
    "_borrowInterestPerBlockCost()": FunctionFragment;
    "_borrowInterestPerBlockReward()": FunctionFragment;
    "_isProfitable()": FunctionFragment;
    "_predictBorrowRate()": FunctionFragment;
    "_predictSupplyRate()": FunctionFragment;
    "_safeReddem()": FunctionFragment;
    "_supplyRewardPerBlock()": FunctionFragment;
    "borrowAndSupply(address,address)": FunctionFragment;
    "borrowBalance()": FunctionFragment;
    "borrowInterestPerBlock(address,address,uint256)": FunctionFragment;
    "deleverage(address,address)": FunctionFragment;
    "isProfitable(address,address,uint256)": FunctionFragment;
    "predictBorrowRate(address,uint256)": FunctionFragment;
    "predictSupplyRate(address,uint256)": FunctionFragment;
    "safeBorrow(address,address)": FunctionFragment;
    "safeCollateralRatio(address,address)": FunctionFragment;
    "safeRedeem(address,address)": FunctionFragment;
    "safeRedeemReturn()": FunctionFragment;
    "supplyBalance()": FunctionFragment;
    "supplyRewardPerBlock(address,address,uint256)": FunctionFragment;
    "vTokenCollateralFactor(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DEFAULT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__predictSupplyRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setBorrowInterestPerBlock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setIsProfitable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "__setPredictBorrowRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setSafeRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setSupplyRewardPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setVTokenCollateralFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_borrowInterestPerBlockCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_borrowInterestPerBlockReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_isProfitable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_predictBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_predictSupplyRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_safeReddem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_supplyRewardPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAndSupply",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowInterestPerBlock",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleverage",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isProfitable",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "predictBorrowRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "predictSupplyRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBorrow",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeCollateralRatio",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeRedeem",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeRedeemReturn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplyBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplyRewardPerBlock",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vTokenCollateralFactor",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "DEFAULT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__predictSupplyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setBorrowInterestPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setIsProfitable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setPredictBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setSafeRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setSupplyRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setVTokenCollateralFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_borrowInterestPerBlockCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_borrowInterestPerBlockReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isProfitable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_predictBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_predictSupplyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_safeReddem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_supplyRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowAndSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowInterestPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleverage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isProfitable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictSupplyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeBorrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeRedeemReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vTokenCollateralFactor",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockSafeVenus extends BaseContract {
  contractName: "MockSafeVenus";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockSafeVenusInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    __predictSupplyRate(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setBorrowInterestPerBlock(
      cost: BigNumberish,
      profit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setIsProfitable(
      predicate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setPredictBorrowRate(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setSafeRedeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setSupplyRewardPerBlock(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setVTokenCollateralFactor(
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _borrowInterestPerBlockCost(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _borrowInterestPerBlockReward(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _isProfitable(overrides?: CallOverrides): Promise<[boolean]>;

    _predictBorrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    _predictSupplyRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    _safeReddem(overrides?: CallOverrides): Promise<[BigNumber]>;

    _supplyRewardPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowAndSupply(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowInterestPerBlock(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    deleverage(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isProfitable(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    predictBorrowRate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    predictSupplyRate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    safeBorrow(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeCollateralRatio(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    safeRedeem(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeRedeemReturn(overrides?: CallOverrides): Promise<[BigNumber]>;

    supplyBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    supplyRewardPerBlock(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vTokenCollateralFactor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  __predictSupplyRate(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setBorrowInterestPerBlock(
    cost: BigNumberish,
    profit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setIsProfitable(
    predicate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setPredictBorrowRate(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setSafeRedeem(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setSupplyRewardPerBlock(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setVTokenCollateralFactor(
    vToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _borrowInterestPerBlockCost(overrides?: CallOverrides): Promise<BigNumber>;

  _borrowInterestPerBlockReward(overrides?: CallOverrides): Promise<BigNumber>;

  _isProfitable(overrides?: CallOverrides): Promise<boolean>;

  _predictBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  _predictSupplyRate(overrides?: CallOverrides): Promise<BigNumber>;

  _safeReddem(overrides?: CallOverrides): Promise<BigNumber>;

  _supplyRewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  borrowAndSupply(
    vault: string,
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowBalance(overrides?: CallOverrides): Promise<BigNumber>;

  borrowInterestPerBlock(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  deleverage(
    vault: string,
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isProfitable(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  predictBorrowRate(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  predictSupplyRate(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeBorrow(
    vault: string,
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeCollateralRatio(
    vault: string,
    vToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safeRedeem(
    vault: string,
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeRedeemReturn(overrides?: CallOverrides): Promise<BigNumber>;

  supplyBalance(overrides?: CallOverrides): Promise<BigNumber>;

  supplyRewardPerBlock(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vTokenCollateralFactor(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    __predictSupplyRate(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setBorrowInterestPerBlock(
      cost: BigNumberish,
      profit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setIsProfitable(
      predicate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    __setPredictBorrowRate(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setSafeRedeem(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setSupplyRewardPerBlock(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setVTokenCollateralFactor(
      vToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _borrowInterestPerBlockCost(overrides?: CallOverrides): Promise<BigNumber>;

    _borrowInterestPerBlockReward(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isProfitable(overrides?: CallOverrides): Promise<boolean>;

    _predictBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    _predictSupplyRate(overrides?: CallOverrides): Promise<BigNumber>;

    _safeReddem(overrides?: CallOverrides): Promise<BigNumber>;

    _supplyRewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    borrowAndSupply(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { borrow: BigNumber; supply: BigNumber }
    >;

    borrowBalance(overrides?: CallOverrides): Promise<BigNumber>;

    borrowInterestPerBlock(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    deleverage(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProfitable(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    predictBorrowRate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    predictSupplyRate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBorrow(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeCollateralRatio(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeRedeem(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeRedeemReturn(overrides?: CallOverrides): Promise<BigNumber>;

    supplyBalance(overrides?: CallOverrides): Promise<BigNumber>;

    supplyRewardPerBlock(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vTokenCollateralFactor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    __predictSupplyRate(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setBorrowInterestPerBlock(
      cost: BigNumberish,
      profit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setIsProfitable(
      predicate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setPredictBorrowRate(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setSafeRedeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setSupplyRewardPerBlock(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setVTokenCollateralFactor(
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _borrowInterestPerBlockCost(overrides?: CallOverrides): Promise<BigNumber>;

    _borrowInterestPerBlockReward(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isProfitable(overrides?: CallOverrides): Promise<BigNumber>;

    _predictBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    _predictSupplyRate(overrides?: CallOverrides): Promise<BigNumber>;

    _safeReddem(overrides?: CallOverrides): Promise<BigNumber>;

    _supplyRewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    borrowAndSupply(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowBalance(overrides?: CallOverrides): Promise<BigNumber>;

    borrowInterestPerBlock(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleverage(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isProfitable(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    predictBorrowRate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    predictSupplyRate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBorrow(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeCollateralRatio(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeRedeem(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeRedeemReturn(overrides?: CallOverrides): Promise<BigNumber>;

    supplyBalance(overrides?: CallOverrides): Promise<BigNumber>;

    supplyRewardPerBlock(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vTokenCollateralFactor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __predictSupplyRate(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setBorrowInterestPerBlock(
      cost: BigNumberish,
      profit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setIsProfitable(
      predicate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setPredictBorrowRate(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setSafeRedeem(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setSupplyRewardPerBlock(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setVTokenCollateralFactor(
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _borrowInterestPerBlockCost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _borrowInterestPerBlockReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isProfitable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _predictBorrowRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _predictSupplyRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _safeReddem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _supplyRewardPerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowAndSupply(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowInterestPerBlock(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleverage(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isProfitable(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    predictBorrowRate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    predictSupplyRate(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBorrow(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeCollateralRatio(
      vault: string,
      vToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeRedeem(
      vault: string,
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeRedeemReturn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyRewardPerBlock(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vTokenCollateralFactor(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
