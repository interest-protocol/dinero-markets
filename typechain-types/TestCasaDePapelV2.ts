/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TestCasaDePapelV2Interface extends utils.Interface {
  contractName: "TestCasaDePapelV2";
  functions: {
    "INTEREST_TOKEN()": FunctionFragment;
    "STAKED_INTEREST_TOKEN()": FunctionFragment;
    "addPool(uint256,address,bool)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "devAccount()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "getPoolsLength()": FunctionFragment;
    "hasPool(address)": FunctionFragment;
    "initialize(address,address,address,uint256,uint256)": FunctionFragment;
    "interestTokenPerBlock()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingRewards(uint256,address)": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAllocationPoints(uint256,uint256,bool)": FunctionFragment;
    "setDevAccount(address)": FunctionFragment;
    "setIntPerBlock(uint256,bool)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "totalAllocationPoints()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(address,address,uint256)": FunctionFragment;
    "updateAllPools()": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "INTEREST_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKED_INTEREST_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "devAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolsLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interestTokenPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllocationPoints",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIntPerBlock",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocationPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "INTEREST_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKED_INTEREST_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestTokenPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllocationPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIntPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocationPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAllPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "Liquidate(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdatePool(uint256,uint256,uint256)": EventFragment;
    "UpdatePoolAllocationPoint(uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Withdraw(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePoolAllocationPoint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; poolId: BigNumber; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; poolId: BigNumber; amount: BigNumber }
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export type LiquidateEvent = TypedEvent<
  [string, string, BigNumber],
  { liquidator: string; debtor: string; amount: BigNumber }
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UpdatePoolEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { poolId: BigNumber; blockNumber: BigNumber; accruedIntPerShare: BigNumber }
>;

export type UpdatePoolEventFilter = TypedEventFilter<UpdatePoolEvent>;

export type UpdatePoolAllocationPointEvent = TypedEvent<
  [BigNumber, BigNumber],
  { poolId: BigNumber; allocationPoints: BigNumber }
>;

export type UpdatePoolAllocationPointEventFilter =
  TypedEventFilter<UpdatePoolAllocationPointEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { user: string; recipient: string; poolId: BigNumber; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface TestCasaDePapelV2 extends BaseContract {
  contractName: "TestCasaDePapelV2";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestCasaDePapelV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INTEREST_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    STAKED_INTEREST_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    addPool(
      allocationPoints: BigNumberish,
      token: string,
      update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    devAccount(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPoolsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasPool(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      interestToken: string,
      stakedInterestToken: string,
      _devAccount: string,
      _interestTokenPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    interestTokenPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingRewards(
      poolId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakingToken: string;
        allocationPoints: BigNumber;
        lastRewardBlock: BigNumber;
        accruedIntPerShare: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllocationPoints(
      poolId: BigNumberish,
      allocationPoints: BigNumberish,
      update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIntPerBlock(
      _interestTokenPerBlock: BigNumberish,
      update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocationPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAllPools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardsPaid: BigNumber }
    >;

    version(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  INTEREST_TOKEN(overrides?: CallOverrides): Promise<string>;

  STAKED_INTEREST_TOKEN(overrides?: CallOverrides): Promise<string>;

  addPool(
    allocationPoints: BigNumberish,
    token: string,
    update: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    poolId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  devAccount(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

  hasPool(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  initialize(
    interestToken: string,
    stakedInterestToken: string,
    _devAccount: string,
    _interestTokenPerBlock: BigNumberish,
    _startBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  interestTokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingRewards(
    poolId: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      stakingToken: string;
      allocationPoints: BigNumber;
      lastRewardBlock: BigNumber;
      accruedIntPerShare: BigNumber;
      totalSupply: BigNumber;
    }
  >;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllocationPoints(
    poolId: BigNumberish,
    allocationPoints: BigNumberish,
    update: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevAccount(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIntPerBlock(
    _interestTokenPerBlock: BigNumberish,
    update: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocationPoints(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    account: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAllPools(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    poolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardsPaid: BigNumber }
  >;

  version(overrides?: CallOverrides): Promise<string>;

  withdraw(
    poolId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    INTEREST_TOKEN(overrides?: CallOverrides): Promise<string>;

    STAKED_INTEREST_TOKEN(overrides?: CallOverrides): Promise<string>;

    addPool(
      allocationPoints: BigNumberish,
      token: string,
      update: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    devAccount(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    hasPool(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      interestToken: string,
      stakedInterestToken: string,
      _devAccount: string,
      _interestTokenPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    interestTokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingRewards(
      poolId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakingToken: string;
        allocationPoints: BigNumber;
        lastRewardBlock: BigNumber;
        accruedIntPerShare: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAllocationPoints(
      poolId: BigNumberish,
      allocationPoints: BigNumberish,
      update: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevAccount(account: string, overrides?: CallOverrides): Promise<void>;

    setIntPerBlock(
      _interestTokenPerBlock: BigNumberish,
      update: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocationPoints(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllPools(overrides?: CallOverrides): Promise<void>;

    updatePool(poolId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardsPaid: BigNumber }
    >;

    version(overrides?: CallOverrides): Promise<string>;

    withdraw(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Deposit(address,uint256,uint256)"(
      user?: string | null,
      poolId?: BigNumberish | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: string | null,
      poolId?: BigNumberish | null,
      amount?: null
    ): DepositEventFilter;

    "EmergencyWithdraw(address,uint256,uint256)"(
      user?: string | null,
      poolId?: BigNumberish | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: string | null,
      poolId?: BigNumberish | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "Liquidate(address,address,uint256)"(
      liquidator?: string | null,
      debtor?: string | null,
      amount?: null
    ): LiquidateEventFilter;
    Liquidate(
      liquidator?: string | null,
      debtor?: string | null,
      amount?: null
    ): LiquidateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "UpdatePool(uint256,uint256,uint256)"(
      poolId?: BigNumberish | null,
      blockNumber?: null,
      accruedIntPerShare?: null
    ): UpdatePoolEventFilter;
    UpdatePool(
      poolId?: BigNumberish | null,
      blockNumber?: null,
      accruedIntPerShare?: null
    ): UpdatePoolEventFilter;

    "UpdatePoolAllocationPoint(uint256,uint256)"(
      poolId?: BigNumberish | null,
      allocationPoints?: null
    ): UpdatePoolAllocationPointEventFilter;
    UpdatePoolAllocationPoint(
      poolId?: BigNumberish | null,
      allocationPoints?: null
    ): UpdatePoolAllocationPointEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "Withdraw(address,address,uint256,uint256)"(
      user?: string | null,
      recipient?: string | null,
      poolId?: BigNumberish | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: string | null,
      recipient?: string | null,
      poolId?: BigNumberish | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    INTEREST_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    STAKED_INTEREST_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      allocationPoints: BigNumberish,
      token: string,
      update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    devAccount(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    hasPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      interestToken: string,
      stakedInterestToken: string,
      _devAccount: string,
      _interestTokenPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    interestTokenPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(
      poolId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllocationPoints(
      poolId: BigNumberish,
      allocationPoints: BigNumberish,
      update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIntPerBlock(
      _interestTokenPerBlock: BigNumberish,
      update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocationPoints(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAllPools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INTEREST_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKED_INTEREST_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPool(
      allocationPoints: BigNumberish,
      token: string,
      update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    devAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPoolsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasPool(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      interestToken: string,
      stakedInterestToken: string,
      _devAccount: string,
      _interestTokenPerBlock: BigNumberish,
      _startBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    interestTokenPerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(
      poolId: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllocationPoints(
      poolId: BigNumberish,
      allocationPoints: BigNumberish,
      update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevAccount(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIntPerBlock(
      _interestTokenPerBlock: BigNumberish,
      update: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocationPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      account: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAllPools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      poolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      poolId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
