/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface NFTMarketInterface extends utils.Interface {
  contractName: "NFTMarket";
  functions: {
    "FEE_TO()": FunctionFragment;
    "borrowerStartLoan(address,uint256,address)": FunctionFragment;
    "counterOffer(address,address,uint256,uint128,uint64,uint64)": FunctionFragment;
    "getAddressOfProposer(address,uint256,uint256)": FunctionFragment;
    "getEarnings(address)": FunctionFragment;
    "getTotalProposals(address,uint256)": FunctionFragment;
    "getUserLoanId(address,address,uint256)": FunctionFragment;
    "getUserLoansCount(address,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "lenderStartLoan(address,uint256)": FunctionFragment;
    "liquidate(address,uint256)": FunctionFragment;
    "loans(address,uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "proposals(address,uint256,address)": FunctionFragment;
    "proposeLoan(address,address,uint256,uint128,uint64,uint64)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdrawBNB(address,uint256,address)": FunctionFragment;
    "withdrawNFT(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "FEE_TO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrowerStartLoan",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "counterOffer",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressOfProposer",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getEarnings", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalProposals",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLoanId",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLoansCount",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lenderStartLoan",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loans",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeLoan",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBNB",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFT",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "FEE_TO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowerStartLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "counterOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressOfProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLoanId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLoansCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lenderStartLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFT",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "BorrowerStartLoan(address,uint256,address,address,address,uint256)": EventFragment;
    "CounterOffer(address,address,uint256,address,uint128,uint64,uint64)": EventFragment;
    "LenderStartLoan(address,uint256,address,address,address,uint256)": EventFragment;
    "Liquidate(address,uint256,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposeLoan(address,address,uint256,address,uint128,uint64,uint64)": EventFragment;
    "Repay(address,uint256,address,address,uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WithdrawBNB(address,uint256,address,uint256)": EventFragment;
    "WithdrawNFT(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowerStartLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CounterOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LenderStartLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposeLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawBNB"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawNFT"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type BorrowerStartLoanEvent = TypedEvent<
  [string, BigNumber, string, string, string, BigNumber],
  {
    collection: string;
    tokenId: BigNumber;
    lender: string;
    borrower: string;
    token: string;
    amount: BigNumber;
  }
>;

export type BorrowerStartLoanEventFilter =
  TypedEventFilter<BorrowerStartLoanEvent>;

export type CounterOfferEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    collection: string;
    lender: string;
    tokenId: BigNumber;
    loanToken: string;
    principal: BigNumber;
    interestRate: BigNumber;
    maturity: BigNumber;
  }
>;

export type CounterOfferEventFilter = TypedEventFilter<CounterOfferEvent>;

export type LenderStartLoanEvent = TypedEvent<
  [string, BigNumber, string, string, string, BigNumber],
  {
    collection: string;
    tokenId: BigNumber;
    lender: string;
    borrower: string;
    token: string;
    amount: BigNumber;
  }
>;

export type LenderStartLoanEventFilter = TypedEventFilter<LenderStartLoanEvent>;

export type LiquidateEvent = TypedEvent<
  [string, BigNumber, string, string],
  { collection: string; tokenId: BigNumber; lender: string; borrower: string }
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ProposeLoanEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    collection: string;
    borrower: string;
    tokenId: BigNumber;
    loanToken: string;
    principal: BigNumber;
    interestRate: BigNumber;
    maturity: BigNumber;
  }
>;

export type ProposeLoanEventFilter = TypedEventFilter<ProposeLoanEvent>;

export type RepayEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber],
  {
    collection: string;
    tokenId: BigNumber;
    lender: string;
    borrower: string;
    total: BigNumber;
    fee: BigNumber;
  }
>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export type WithdrawBNBEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  {
    collection: string;
    tokenId: BigNumber;
    proposer: string;
    amount: BigNumber;
  }
>;

export type WithdrawBNBEventFilter = TypedEventFilter<WithdrawBNBEvent>;

export type WithdrawNFTEvent = TypedEvent<
  [string, BigNumber, string],
  { collection: string; tokenId: BigNumber; owner: string }
>;

export type WithdrawNFTEventFilter = TypedEventFilter<WithdrawNFTEvent>;

export interface NFTMarket extends BaseContract {
  contractName: "NFTMarket";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_TO(overrides?: CallOverrides): Promise<[string]>;

    borrowerStartLoan(
      collection: string,
      tokenId: BigNumberish,
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    counterOffer(
      collection: string,
      loanToken: string,
      tokenId: BigNumberish,
      principal: BigNumberish,
      interestRate: BigNumberish,
      maturity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAddressOfProposer(
      collection: string,
      tokenId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEarnings(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTotalProposals(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserLoanId(
      collection: string,
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserLoansCount(
      collection: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lenderStartLoan(
      collection: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      collection: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    loans(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lender: string;
        borrower: string;
        loanToken: string;
        interestRate: BigNumber;
        tokenId: BigNumber;
        maturity: BigNumber;
        startDate: BigNumber;
        principal: BigNumber;
      }
    >;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposals(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber] & {
        loanToken: string;
        lender: string;
        maturity: BigNumber;
        interestRate: BigNumber;
        principal: BigNumber;
      }
    >;

    proposeLoan(
      collection: string,
      loanToken: string,
      tokenId: BigNumberish,
      principal: BigNumberish,
      interestRate: BigNumberish,
      maturity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      collection: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBNB(
      collection: string,
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawNFT(
      collection: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FEE_TO(overrides?: CallOverrides): Promise<string>;

  borrowerStartLoan(
    collection: string,
    tokenId: BigNumberish,
    proposer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  counterOffer(
    collection: string,
    loanToken: string,
    tokenId: BigNumberish,
    principal: BigNumberish,
    interestRate: BigNumberish,
    maturity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAddressOfProposer(
    collection: string,
    tokenId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEarnings(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTotalProposals(
    collection: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserLoanId(
    collection: string,
    user: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserLoansCount(
    collection: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    feeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lenderStartLoan(
    collection: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    collection: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  loans(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      lender: string;
      borrower: string;
      loanToken: string;
      interestRate: BigNumber;
      tokenId: BigNumber;
      maturity: BigNumber;
      startDate: BigNumber;
      principal: BigNumber;
    }
  >;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposals(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber] & {
      loanToken: string;
      lender: string;
      maturity: BigNumber;
      interestRate: BigNumber;
      principal: BigNumber;
    }
  >;

  proposeLoan(
    collection: string,
    loanToken: string,
    tokenId: BigNumberish,
    principal: BigNumberish,
    interestRate: BigNumberish,
    maturity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    collection: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBNB(
    collection: string,
    tokenId: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawNFT(
    collection: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE_TO(overrides?: CallOverrides): Promise<string>;

    borrowerStartLoan(
      collection: string,
      tokenId: BigNumberish,
      proposer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    counterOffer(
      collection: string,
      loanToken: string,
      tokenId: BigNumberish,
      principal: BigNumberish,
      interestRate: BigNumberish,
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddressOfProposer(
      collection: string,
      tokenId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEarnings(token: string, overrides?: CallOverrides): Promise<void>;

    getTotalProposals(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLoanId(
      collection: string,
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLoansCount(
      collection: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(feeTo: string, overrides?: CallOverrides): Promise<void>;

    lenderStartLoan(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    loans(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lender: string;
        borrower: string;
        loanToken: string;
        interestRate: BigNumber;
        tokenId: BigNumber;
        maturity: BigNumber;
        startDate: BigNumber;
        principal: BigNumber;
      }
    >;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposals(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber] & {
        loanToken: string;
        lender: string;
        maturity: BigNumber;
        interestRate: BigNumber;
        principal: BigNumber;
      }
    >;

    proposeLoan(
      collection: string,
      loanToken: string,
      tokenId: BigNumberish,
      principal: BigNumberish,
      interestRate: BigNumberish,
      maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repay(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBNB(
      collection: string,
      tokenId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNFT(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "BorrowerStartLoan(address,uint256,address,address,address,uint256)"(
      collection?: string | null,
      tokenId?: BigNumberish | null,
      lender?: null,
      borrower?: string | null,
      token?: null,
      amount?: null
    ): BorrowerStartLoanEventFilter;
    BorrowerStartLoan(
      collection?: string | null,
      tokenId?: BigNumberish | null,
      lender?: null,
      borrower?: string | null,
      token?: null,
      amount?: null
    ): BorrowerStartLoanEventFilter;

    "CounterOffer(address,address,uint256,address,uint128,uint64,uint64)"(
      collection?: string | null,
      lender?: string | null,
      tokenId?: BigNumberish | null,
      loanToken?: null,
      principal?: null,
      interestRate?: null,
      maturity?: null
    ): CounterOfferEventFilter;
    CounterOffer(
      collection?: string | null,
      lender?: string | null,
      tokenId?: BigNumberish | null,
      loanToken?: null,
      principal?: null,
      interestRate?: null,
      maturity?: null
    ): CounterOfferEventFilter;

    "LenderStartLoan(address,uint256,address,address,address,uint256)"(
      collection?: string | null,
      tokenId?: BigNumberish | null,
      lender?: string | null,
      borrower?: null,
      token?: null,
      amount?: null
    ): LenderStartLoanEventFilter;
    LenderStartLoan(
      collection?: string | null,
      tokenId?: BigNumberish | null,
      lender?: string | null,
      borrower?: null,
      token?: null,
      amount?: null
    ): LenderStartLoanEventFilter;

    "Liquidate(address,uint256,address,address)"(
      collection?: string | null,
      tokenId?: BigNumberish | null,
      lender?: string | null,
      borrower?: null
    ): LiquidateEventFilter;
    Liquidate(
      collection?: string | null,
      tokenId?: BigNumberish | null,
      lender?: string | null,
      borrower?: null
    ): LiquidateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProposeLoan(address,address,uint256,address,uint128,uint64,uint64)"(
      collection?: string | null,
      borrower?: string | null,
      tokenId?: BigNumberish | null,
      loanToken?: null,
      principal?: null,
      interestRate?: null,
      maturity?: null
    ): ProposeLoanEventFilter;
    ProposeLoan(
      collection?: string | null,
      borrower?: string | null,
      tokenId?: BigNumberish | null,
      loanToken?: null,
      principal?: null,
      interestRate?: null,
      maturity?: null
    ): ProposeLoanEventFilter;

    "Repay(address,uint256,address,address,uint256,uint256)"(
      collection?: string | null,
      tokenId?: BigNumberish | null,
      lender?: null,
      borrower?: string | null,
      total?: null,
      fee?: null
    ): RepayEventFilter;
    Repay(
      collection?: string | null,
      tokenId?: BigNumberish | null,
      lender?: null,
      borrower?: string | null,
      total?: null,
      fee?: null
    ): RepayEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "WithdrawBNB(address,uint256,address,uint256)"(
      collection?: string | null,
      tokenId?: BigNumberish | null,
      proposer?: string | null,
      amount?: null
    ): WithdrawBNBEventFilter;
    WithdrawBNB(
      collection?: string | null,
      tokenId?: BigNumberish | null,
      proposer?: string | null,
      amount?: null
    ): WithdrawBNBEventFilter;

    "WithdrawNFT(address,uint256,address)"(
      collection?: string | null,
      tokenId?: BigNumberish | null,
      owner?: string | null
    ): WithdrawNFTEventFilter;
    WithdrawNFT(
      collection?: string | null,
      tokenId?: BigNumberish | null,
      owner?: string | null
    ): WithdrawNFTEventFilter;
  };

  estimateGas: {
    FEE_TO(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerStartLoan(
      collection: string,
      tokenId: BigNumberish,
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    counterOffer(
      collection: string,
      loanToken: string,
      tokenId: BigNumberish,
      principal: BigNumberish,
      interestRate: BigNumberish,
      maturity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAddressOfProposer(
      collection: string,
      tokenId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEarnings(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTotalProposals(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLoanId(
      collection: string,
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLoansCount(
      collection: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lenderStartLoan(
      collection: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      collection: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    loans(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeLoan(
      collection: string,
      loanToken: string,
      tokenId: BigNumberish,
      principal: BigNumberish,
      interestRate: BigNumberish,
      maturity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      collection: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBNB(
      collection: string,
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawNFT(
      collection: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_TO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowerStartLoan(
      collection: string,
      tokenId: BigNumberish,
      proposer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    counterOffer(
      collection: string,
      loanToken: string,
      tokenId: BigNumberish,
      principal: BigNumberish,
      interestRate: BigNumberish,
      maturity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAddressOfProposer(
      collection: string,
      tokenId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEarnings(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTotalProposals(
      collection: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLoanId(
      collection: string,
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLoansCount(
      collection: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lenderStartLoan(
      collection: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      collection: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    loans(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeLoan(
      collection: string,
      loanToken: string,
      tokenId: BigNumberish,
      principal: BigNumberish,
      interestRate: BigNumberish,
      maturity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      collection: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBNB(
      collection: string,
      tokenId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNFT(
      collection: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
