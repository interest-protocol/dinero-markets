/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockVenusControllerInterface extends utils.Interface {
  contractName: "MockVenusController";
  functions: {
    "XVS()": FunctionFragment;
    "__setClaimVenusValue(uint256)": FunctionFragment;
    "__setEnterMarketReturn(uint256)": FunctionFragment;
    "__setExitMarketReturn(uint256)": FunctionFragment;
    "__setLiquidity(uint256,uint256,uint256)": FunctionFragment;
    "__setMarkets(address,bool,uint256,bool,bool)": FunctionFragment;
    "__setVenusSpeeds(address,uint256)": FunctionFragment;
    "claimVenus(address,address[])": FunctionFragment;
    "enterMarkets(address[])": FunctionFragment;
    "exitMarket(address)": FunctionFragment;
    "getAccountLiquidity(address)": FunctionFragment;
    "liquidity()": FunctionFragment;
    "markets(address)": FunctionFragment;
    "venusSpeeds(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "XVS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__setClaimVenusValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setEnterMarketReturn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setExitMarketReturn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__setMarkets",
    values: [string, boolean, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "__setVenusSpeeds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimVenus",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarkets",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "exitMarket", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAccountLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(functionFragment: "markets", values: [string]): string;
  encodeFunctionData(functionFragment: "venusSpeeds", values: [string]): string;

  decodeFunctionResult(functionFragment: "XVS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__setClaimVenusValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setEnterMarketReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setExitMarketReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__setVenusSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimVenus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "venusSpeeds",
    data: BytesLike
  ): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "EnterMarket(address)": EventFragment;
    "ExitMarket(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterMarket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitMarket"): EventFragment;
}

export type ClaimEvent = TypedEvent<
  [string, BigNumber],
  { account: string; amount: BigNumber }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type EnterMarketEvent = TypedEvent<[string], { vToken: string }>;

export type EnterMarketEventFilter = TypedEventFilter<EnterMarketEvent>;

export type ExitMarketEvent = TypedEvent<[string], { vToken: string }>;

export type ExitMarketEventFilter = TypedEventFilter<ExitMarketEvent>;

export interface MockVenusController extends BaseContract {
  contractName: "MockVenusController";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockVenusControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    XVS(overrides?: CallOverrides): Promise<[string]>;

    __setClaimVenusValue(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setEnterMarketReturn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setExitMarketReturn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setLiquidity(
      error: BigNumberish,
      _liquidity: BigNumberish,
      shortfall: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setMarkets(
      account: string,
      isListed: boolean,
      collateralFactorMantissa: BigNumberish,
      accountMembership: boolean,
      isVenus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    __setVenusSpeeds(
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimVenus(address,address[])"(
      account: string,
      arg1: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimVenus(address)"(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enterMarkets(
      _markets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitMarket(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountLiquidity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    liquidity(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        error: BigNumber;
        liquidity: BigNumber;
        shortfall: BigNumber;
      }
    >;

    markets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        isVenus: boolean;
      }
    >;

    venusSpeeds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  XVS(overrides?: CallOverrides): Promise<string>;

  __setClaimVenusValue(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setEnterMarketReturn(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setExitMarketReturn(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setLiquidity(
    error: BigNumberish,
    _liquidity: BigNumberish,
    shortfall: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setMarkets(
    account: string,
    isListed: boolean,
    collateralFactorMantissa: BigNumberish,
    accountMembership: boolean,
    isVenus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  __setVenusSpeeds(
    vToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimVenus(address,address[])"(
    account: string,
    arg1: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimVenus(address)"(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enterMarkets(
    _markets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitMarket(
    vToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountLiquidity(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  liquidity(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      error: BigNumber;
      liquidity: BigNumber;
      shortfall: BigNumber;
    }
  >;

  markets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, boolean] & {
      isListed: boolean;
      collateralFactorMantissa: BigNumber;
      isVenus: boolean;
    }
  >;

  venusSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    XVS(overrides?: CallOverrides): Promise<string>;

    __setClaimVenusValue(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setEnterMarketReturn(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setExitMarketReturn(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setLiquidity(
      error: BigNumberish,
      _liquidity: BigNumberish,
      shortfall: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __setMarkets(
      account: string,
      isListed: boolean,
      collateralFactorMantissa: BigNumberish,
      accountMembership: boolean,
      isVenus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    __setVenusSpeeds(
      vToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimVenus(address,address[])"(
      account: string,
      arg1: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimVenus(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enterMarkets(
      _markets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    exitMarket(vToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountLiquidity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    liquidity(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        error: BigNumber;
        liquidity: BigNumber;
        shortfall: BigNumber;
      }
    >;

    markets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        isVenus: boolean;
      }
    >;

    venusSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Claim(address,uint256)"(account?: null, amount?: null): ClaimEventFilter;
    Claim(account?: null, amount?: null): ClaimEventFilter;

    "EnterMarket(address)"(vToken?: null): EnterMarketEventFilter;
    EnterMarket(vToken?: null): EnterMarketEventFilter;

    "ExitMarket(address)"(vToken?: null): ExitMarketEventFilter;
    ExitMarket(vToken?: null): ExitMarketEventFilter;
  };

  estimateGas: {
    XVS(overrides?: CallOverrides): Promise<BigNumber>;

    __setClaimVenusValue(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setEnterMarketReturn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setExitMarketReturn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setLiquidity(
      error: BigNumberish,
      _liquidity: BigNumberish,
      shortfall: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setMarkets(
      account: string,
      isListed: boolean,
      collateralFactorMantissa: BigNumberish,
      accountMembership: boolean,
      isVenus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    __setVenusSpeeds(
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimVenus(address,address[])"(
      account: string,
      arg1: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimVenus(address)"(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enterMarkets(
      _markets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitMarket(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountLiquidity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    markets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    venusSpeeds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    XVS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __setClaimVenusValue(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setEnterMarketReturn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setExitMarketReturn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setLiquidity(
      error: BigNumberish,
      _liquidity: BigNumberish,
      shortfall: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setMarkets(
      account: string,
      isListed: boolean,
      collateralFactorMantissa: BigNumberish,
      accountMembership: boolean,
      isVenus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    __setVenusSpeeds(
      vToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimVenus(address,address[])"(
      account: string,
      arg1: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimVenus(address)"(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enterMarkets(
      _markets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitMarket(
      vToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountLiquidity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    venusSpeeds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
