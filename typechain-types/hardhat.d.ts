/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IVotesUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotesUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "ERC20VotesUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20VotesUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721HolderUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721HolderUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "CasaDePapel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CasaDePapel__factory>;
    getContractFactory(
      name: "DineroVenusVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DineroVenusVault__factory>;
    getContractFactory(
      name: "InterestBNBMarketV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestBNBMarketV1__factory>;
    getContractFactory(
      name: "InterestMarketV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestMarketV1__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "IMasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterChef__factory>;
    getContractFactory(
      name: "IMasterChefVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterChefVault__factory>;
    getContractFactory(
      name: "IPancakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeFactory__factory>;
    getContractFactory(
      name: "IPancakePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakePair__factory>;
    getContractFactory(
      name: "IPancakeRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeRouter01__factory>;
    getContractFactory(
      name: "IPancakeRouter02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeRouter02__factory>;
    getContractFactory(
      name: "IVenusController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVenusController__factory>;
    getContractFactory(
      name: "IVenusInterestRateModel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVenusInterestRateModel__factory>;
    getContractFactory(
      name: "IVenusVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVenusVault__factory>;
    getContractFactory(
      name: "IVToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVToken__factory>;
    getContractFactory(
      name: "FixedPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FixedPoint__factory>;
    getContractFactory(
      name: "LibraryWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibraryWrapper__factory>;
    getContractFactory(
      name: "CakeVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CakeVault__factory>;
    getContractFactory(
      name: "LPVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPVault__factory>;
    getContractFactory(
      name: "MasterChefVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterChefVault__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockNoInfiniteAllowanceERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockNoInfiniteAllowanceERC20__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "MockChainLinkFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockChainLinkFeed__factory>;
    getContractFactory(
      name: "MockBytesErrorChainLinkFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBytesErrorChainLinkFeed__factory>;
    getContractFactory(
      name: "MockErrorChainLinkFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockErrorChainLinkFeed__factory>;
    getContractFactory(
      name: "MockInterestMarketV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockInterestMarketV1__factory>;
    getContractFactory(
      name: "MockInterestRateModel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockInterestRateModel__factory>;
    getContractFactory(
      name: "MockLibraryWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockLibraryWrapper__factory>;
    getContractFactory(
      name: "MockNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockNFT__factory>;
    getContractFactory(
      name: "MockSafeVenus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSafeVenus__factory>;
    getContractFactory(
      name: "MockSimplePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSimplePair__factory>;
    getContractFactory(
      name: "MockTWAP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockTWAP__factory>;
    getContractFactory(
      name: "MockVenusController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVenusController__factory>;
    getContractFactory(
      name: "MockVenusVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVenusVault__factory>;
    getContractFactory(
      name: "MockVenusToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVenusToken__factory>;
    getContractFactory(
      name: "IInterestMarketBNBV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterestMarketBNBV1__factory>;
    getContractFactory(
      name: "ReentrantInterestBNBMarketLiquidate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrantInterestBNBMarketLiquidate__factory>;
    getContractFactory(
      name: "ReentrantInterestBNBMarketWithdrawCollateral",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrantInterestBNBMarketWithdrawCollateral__factory>;
    getContractFactory(
      name: "INFTMarket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTMarket__factory>;
    getContractFactory(
      name: "ReentrantNFTMarketBorrowerStartLoan",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrantNFTMarketBorrowerStartLoan__factory>;
    getContractFactory(
      name: "ReentrantNFTMarketLenderStartLoan",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrantNFTMarketLenderStartLoan__factory>;
    getContractFactory(
      name: "ReentrantNFTMarketRepay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrantNFTMarketRepay__factory>;
    getContractFactory(
      name: "ReentrantNFTMarketWithdrawBNB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrantNFTMarketWithdrawBNB__factory>;
    getContractFactory(
      name: "BEP20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BEP20__factory>;
    getContractFactory(
      name: "CakeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CakeToken__factory>;
    getContractFactory(
      name: "ETHRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ETHRouter__factory>;
    getContractFactory(
      name: "IBEP20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBEP20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IPancakeCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeCallee__factory>;
    getContractFactory(
      name: "IPancakeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeERC20__factory>;
    getContractFactory(
      name: "IPancakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeFactory__factory>;
    getContractFactory(
      name: "IPancakePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakePair__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "LiquidityRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityRouter__factory>;
    getContractFactory(
      name: "IMigratorChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigratorChef__factory>;
    getContractFactory(
      name: "MasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterChef__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "PancakeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeERC20__factory>;
    getContractFactory(
      name: "PancakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeFactory__factory>;
    getContractFactory(
      name: "PancakePair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakePair__factory>;
    getContractFactory(
      name: "PancakeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeRouter__factory>;
    getContractFactory(
      name: "SyrupBar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyrupBar__factory>;
    getContractFactory(
      name: "TestDineroVenusVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestDineroVenusVault__factory>;
    getContractFactory(
      name: "TestNFTMarket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestNFTMarket__factory>;
    getContractFactory(
      name: "TestSafeVenus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestSafeVenus__factory>;
    getContractFactory(
      name: "TestCakeVaultV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCakeVaultV2__factory>;
    getContractFactory(
      name: "TestCasaDePapelV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCasaDePapelV2__factory>;
    getContractFactory(
      name: "TestDineroV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestDineroV2__factory>;
    getContractFactory(
      name: "TestDineroVenusVaultV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestDineroVenusVaultV2__factory>;
    getContractFactory(
      name: "TestInterestBNBMarketV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestInterestBNBMarketV2__factory>;
    getContractFactory(
      name: "TestInterestMarketV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestInterestMarketV2__factory>;
    getContractFactory(
      name: "TestInterestTokenV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestInterestTokenV2__factory>;
    getContractFactory(
      name: "TestLPVaultV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLPVaultV2__factory>;
    getContractFactory(
      name: "TestNFTMarketV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestNFTMarketV2__factory>;
    getContractFactory(
      name: "TestOracleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestOracleV2__factory>;
    getContractFactory(
      name: "TestPancakeOracleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestPancakeOracleV2__factory>;
    getContractFactory(
      name: "TestSafeVenusV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestSafeVenusV2__factory>;
    getContractFactory(
      name: "TestStakedInterestTokenV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestStakedInterestTokenV2__factory>;
    getContractFactory(
      name: "NFTMarket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTMarket__factory>;
    getContractFactory(
      name: "OracleV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleV1__factory>;
    getContractFactory(
      name: "PancakeOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeOracle__factory>;
    getContractFactory(
      name: "SafeVenus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeVenus__factory>;
    getContractFactory(
      name: "Dinero",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Dinero__factory>;
    getContractFactory(
      name: "InterestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestToken__factory>;
    getContractFactory(
      name: "StakedInterestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedInterestToken__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IVotesUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotesUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "ERC20VotesUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20VotesUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ERC721HolderUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721HolderUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "CasaDePapel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CasaDePapel>;
    getContractAt(
      name: "DineroVenusVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DineroVenusVault>;
    getContractAt(
      name: "InterestBNBMarketV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterestBNBMarketV1>;
    getContractAt(
      name: "InterestMarketV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterestMarketV1>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "IMasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterChef>;
    getContractAt(
      name: "IMasterChefVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterChefVault>;
    getContractAt(
      name: "IPancakeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeFactory>;
    getContractAt(
      name: "IPancakePair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakePair>;
    getContractAt(
      name: "IPancakeRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeRouter01>;
    getContractAt(
      name: "IPancakeRouter02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeRouter02>;
    getContractAt(
      name: "IVenusController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVenusController>;
    getContractAt(
      name: "IVenusInterestRateModel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVenusInterestRateModel>;
    getContractAt(
      name: "IVenusVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVenusVault>;
    getContractAt(
      name: "IVToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVToken>;
    getContractAt(
      name: "FixedPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FixedPoint>;
    getContractAt(
      name: "LibraryWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibraryWrapper>;
    getContractAt(
      name: "CakeVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CakeVault>;
    getContractAt(
      name: "LPVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LPVault>;
    getContractAt(
      name: "MasterChefVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterChefVault>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockNoInfiniteAllowanceERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockNoInfiniteAllowanceERC20>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "MockChainLinkFeed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockChainLinkFeed>;
    getContractAt(
      name: "MockBytesErrorChainLinkFeed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBytesErrorChainLinkFeed>;
    getContractAt(
      name: "MockErrorChainLinkFeed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockErrorChainLinkFeed>;
    getContractAt(
      name: "MockInterestMarketV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockInterestMarketV1>;
    getContractAt(
      name: "MockInterestRateModel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockInterestRateModel>;
    getContractAt(
      name: "MockLibraryWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockLibraryWrapper>;
    getContractAt(
      name: "MockNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockNFT>;
    getContractAt(
      name: "MockSafeVenus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSafeVenus>;
    getContractAt(
      name: "MockSimplePair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSimplePair>;
    getContractAt(
      name: "MockTWAP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockTWAP>;
    getContractAt(
      name: "MockVenusController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVenusController>;
    getContractAt(
      name: "MockVenusVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVenusVault>;
    getContractAt(
      name: "MockVenusToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVenusToken>;
    getContractAt(
      name: "IInterestMarketBNBV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterestMarketBNBV1>;
    getContractAt(
      name: "ReentrantInterestBNBMarketLiquidate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrantInterestBNBMarketLiquidate>;
    getContractAt(
      name: "ReentrantInterestBNBMarketWithdrawCollateral",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrantInterestBNBMarketWithdrawCollateral>;
    getContractAt(
      name: "INFTMarket",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTMarket>;
    getContractAt(
      name: "ReentrantNFTMarketBorrowerStartLoan",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrantNFTMarketBorrowerStartLoan>;
    getContractAt(
      name: "ReentrantNFTMarketLenderStartLoan",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrantNFTMarketLenderStartLoan>;
    getContractAt(
      name: "ReentrantNFTMarketRepay",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrantNFTMarketRepay>;
    getContractAt(
      name: "ReentrantNFTMarketWithdrawBNB",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrantNFTMarketWithdrawBNB>;
    getContractAt(
      name: "BEP20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BEP20>;
    getContractAt(
      name: "CakeToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CakeToken>;
    getContractAt(
      name: "ETHRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ETHRouter>;
    getContractAt(
      name: "IBEP20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBEP20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IPancakeCallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeCallee>;
    getContractAt(
      name: "IPancakeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeERC20>;
    getContractAt(
      name: "IPancakeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeFactory>;
    getContractAt(
      name: "IPancakePair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakePair>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "LiquidityRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityRouter>;
    getContractAt(
      name: "IMigratorChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigratorChef>;
    getContractAt(
      name: "MasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterChef>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "PancakeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakeERC20>;
    getContractAt(
      name: "PancakeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakeFactory>;
    getContractAt(
      name: "PancakePair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakePair>;
    getContractAt(
      name: "PancakeRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakeRouter>;
    getContractAt(
      name: "SyrupBar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyrupBar>;
    getContractAt(
      name: "TestDineroVenusVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestDineroVenusVault>;
    getContractAt(
      name: "TestNFTMarket",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestNFTMarket>;
    getContractAt(
      name: "TestSafeVenus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestSafeVenus>;
    getContractAt(
      name: "TestCakeVaultV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCakeVaultV2>;
    getContractAt(
      name: "TestCasaDePapelV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCasaDePapelV2>;
    getContractAt(
      name: "TestDineroV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestDineroV2>;
    getContractAt(
      name: "TestDineroVenusVaultV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestDineroVenusVaultV2>;
    getContractAt(
      name: "TestInterestBNBMarketV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestInterestBNBMarketV2>;
    getContractAt(
      name: "TestInterestMarketV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestInterestMarketV2>;
    getContractAt(
      name: "TestInterestTokenV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestInterestTokenV2>;
    getContractAt(
      name: "TestLPVaultV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLPVaultV2>;
    getContractAt(
      name: "TestNFTMarketV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestNFTMarketV2>;
    getContractAt(
      name: "TestOracleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestOracleV2>;
    getContractAt(
      name: "TestPancakeOracleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestPancakeOracleV2>;
    getContractAt(
      name: "TestSafeVenusV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestSafeVenusV2>;
    getContractAt(
      name: "TestStakedInterestTokenV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestStakedInterestTokenV2>;
    getContractAt(
      name: "NFTMarket",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTMarket>;
    getContractAt(
      name: "OracleV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleV1>;
    getContractAt(
      name: "PancakeOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakeOracle>;
    getContractAt(
      name: "SafeVenus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeVenus>;
    getContractAt(
      name: "Dinero",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Dinero>;
    getContractAt(
      name: "InterestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterestToken>;
    getContractAt(
      name: "StakedInterestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakedInterestToken>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
